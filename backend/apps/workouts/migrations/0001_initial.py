# Generated by Django 4.2.7 on 2025-07-02 22:05

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('machines', '0001_initial'),
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SeanceEntrainement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('nom', models.CharField(blank=True, max_length=100, verbose_name='Nom de la séance')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('date_prevue', models.DateTimeField(verbose_name='Date prévue')),
                ('date_debut', models.DateTimeField(blank=True, null=True, verbose_name='Date de début')),
                ('date_fin', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin')),
                ('duree_prevue', models.PositiveIntegerField(default=60, help_text='Durée prévue en minutes', verbose_name='Durée prévue (min)')),
                ('statut', models.CharField(choices=[('PLANIFIEE', 'Planifiée'), ('EN_COURS', 'En cours'), ('TERMINEE', 'Terminée'), ('ANNULEE', 'Annulée'), ('SUSPENDUE', 'Suspendue')], default='PLANIFIEE', max_length=15, verbose_name='Statut')),
                ('note_ressenti', models.PositiveIntegerField(blank=True, help_text='Note de ressenti de 1 à 10', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Note de ressenti')),
                ('note_difficulte', models.PositiveIntegerField(blank=True, help_text='Note de difficulté de 1 à 10', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Note de difficulté')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('poids_utilisateur', models.FloatField(blank=True, help_text='Poids au moment de la séance en kg', null=True, verbose_name='Poids (kg)')),
                ('frequence_cardiaque_repos', models.PositiveIntegerField(blank=True, help_text='Fréquence cardiaque au repos', null=True, verbose_name='FC repos (bpm)')),
                ('frequence_cardiaque_max', models.PositiveIntegerField(blank=True, help_text='Fréquence cardiaque maximale atteinte', null=True, verbose_name='FC max (bpm)')),
                ('volume_total', models.FloatField(default=0.0, help_text='Volume total de la séance (poids × reps × séries)', verbose_name='Volume total')),
                ('tonnage_total', models.FloatField(default=0.0, help_text='Tonnage total soulevé en kg', verbose_name='Tonnage total (kg)')),
                ('nombre_exercices', models.PositiveIntegerField(default=0, verbose_name="Nombre d'exercices")),
                ('nombre_series_totales', models.PositiveIntegerField(default=0, verbose_name='Nombre de séries totales')),
                ('salle', models.CharField(blank=True, max_length=100, verbose_name='Salle')),
                ('partenaire_entrainement', models.CharField(blank=True, max_length=100, verbose_name="Partenaire d'entraînement")),
                ('temperature', models.FloatField(blank=True, help_text='Température en degrés Celsius', null=True, verbose_name='Température (°C)')),
                ('mode_entrainement', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.modeentrainement', verbose_name="Mode d'entraînement")),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seances', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Séance d'entraînement",
                'verbose_name_plural': "Séances d'entraînement",
                'ordering': ['-date_prevue'],
            },
        ),
        migrations.CreateModel(
            name='ProgressionMachine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('poids_actuel', models.FloatField(verbose_name='Poids actuel (kg)')),
                ('series_actuelles', models.PositiveIntegerField(default=3, verbose_name='Séries actuelles')),
                ('repetitions_actuelles', models.PositiveIntegerField(default=10, verbose_name='Répétitions actuelles')),
                ('dernier_1rm', models.FloatField(blank=True, null=True, verbose_name='Dernier 1RM (kg)')),
                ('nombre_seances_machine', models.PositiveIntegerField(default=0, verbose_name='Nombre de séances sur cette machine')),
                ('progression_poids_total', models.FloatField(default=0.0, help_text='Progression totale en kg depuis le début', verbose_name='Progression poids total (kg)')),
                ('taux_reussite', models.FloatField(default=0.0, help_text='Taux de réussite en pourcentage', verbose_name='Taux de réussite (%)')),
                ('increment_automatique', models.BooleanField(default=True, verbose_name='Incrément automatique')),
                ('seuil_progression', models.FloatField(default=90.0, help_text='Seuil de réussite pour progression automatique (%)', verbose_name='Seuil de progression (%)')),
                ('premiere_utilisation', models.DateTimeField(auto_now_add=True, verbose_name='Première utilisation')),
                ('derniere_progression', models.DateTimeField(blank=True, null=True, verbose_name='Dernière progression')),
                ('derniere_seance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='progressions_mises_a_jour', to='workouts.seanceentrainement', verbose_name='Dernière séance')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='machines.machine', verbose_name='Machine')),
                ('mode_entrainement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.modeentrainement', verbose_name="Mode d'entraînement")),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progressions', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Progression sur machine',
                'verbose_name_plural': 'Progressions sur machines',
                'ordering': ['utilisateur', 'machine'],
            },
        ),
        migrations.CreateModel(
            name='ExerciceSeance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('ordre_dans_seance', models.PositiveIntegerField(default=1, verbose_name='Ordre dans la séance')),
                ('series_prevues', models.PositiveIntegerField(default=3, verbose_name='Séries prévues')),
                ('repetitions_prevues', models.PositiveIntegerField(default=10, verbose_name='Répétitions prévues')),
                ('poids_prevu', models.FloatField(help_text='Poids prévu en kg', verbose_name='Poids prévu (kg)')),
                ('repos_prevu', models.PositiveIntegerField(default=90, help_text='Repos prévu entre séries en secondes', verbose_name='Repos prévu (s)')),
                ('statut', models.CharField(choices=[('PLANIFIE', 'Planifié'), ('EN_COURS', 'En cours'), ('TERMINE', 'Terminé'), ('ECHOUE', 'Échoué'), ('ABANDONNE', 'Abandonné')], default='PLANIFIE', max_length=15, verbose_name='Statut')),
                ('nombre_series', models.PositiveIntegerField(default=0, verbose_name='Séries réalisées')),
                ('repetitions_realisees', models.PositiveIntegerField(default=0, verbose_name='Répétitions totales réalisées')),
                ('poids_utilise', models.FloatField(blank=True, help_text='Poids réellement utilisé en kg', null=True, verbose_name='Poids utilisé (kg)')),
                ('volume_total', models.FloatField(default=0.0, help_text='Volume total (poids × reps × séries)', verbose_name='Volume total')),
                ('tonnage_total', models.FloatField(default=0.0, help_text='Tonnage total soulevé', verbose_name='Tonnage total')),
                ('charge_maximale_theorique', models.FloatField(blank=True, help_text='1RM estimé avec formule de Brzycki', null=True, verbose_name='1RM estimé (kg)')),
                ('duree_totale', models.PositiveIntegerField(blank=True, help_text="Durée totale de l'exercice en secondes", null=True, verbose_name='Durée totale (s)')),
                ('note_ressenti', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Note de ressenti')),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='machines.machine', verbose_name='Machine')),
                ('seance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercices', to='workouts.seanceentrainement', verbose_name='Séance')),
                ('variante', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='machines.variantemachine', verbose_name='Variante')),
            ],
            options={
                'verbose_name': 'Exercice de séance',
                'verbose_name_plural': 'Exercices de séances',
                'ordering': ['seance', 'ordre_dans_seance'],
            },
        ),
        migrations.CreateModel(
            name='SeriExercice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('numero_serie', models.PositiveIntegerField(verbose_name='Numéro de série')),
                ('repetitions_prevues', models.PositiveIntegerField(verbose_name='Répétitions prévues')),
                ('poids_prevu', models.FloatField(verbose_name='Poids prévu (kg)')),
                ('repos_prevu', models.PositiveIntegerField(default=90, help_text='Repos après cette série en secondes', verbose_name='Repos prévu (s)')),
                ('repetitions_realisees', models.PositiveIntegerField(default=0, verbose_name='Répétitions réalisées')),
                ('poids_utilise', models.FloatField(blank=True, null=True, verbose_name='Poids utilisé (kg)')),
                ('repos_reel', models.PositiveIntegerField(blank=True, help_text='Repos réel en secondes', null=True, verbose_name='Repos réel (s)')),
                ('statut', models.CharField(choices=[('PLANIFIEE', 'Planifiée'), ('EN_COURS', 'En cours'), ('REUSSIE', 'Réussie'), ('ECHOUEE', 'Échouée'), ('PARTIELLE', 'Partielle')], default='PLANIFIEE', max_length=15, verbose_name='Statut')),
                ('duree_serie', models.PositiveIntegerField(blank=True, help_text='Durée de la série en secondes', null=True, verbose_name='Durée série (s)')),
                ('frequence_cardiaque_apres', models.PositiveIntegerField(blank=True, help_text='Fréquence cardiaque après la série', null=True, verbose_name='FC après série (bpm)')),
                ('note_effort', models.PositiveIntegerField(blank=True, help_text="Note d'effort perçu (RPE)", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name="Note d'effort")),
                ('commentaire', models.TextField(blank=True, verbose_name='Commentaire')),
                ('exercice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series', to='workouts.exerciceseance', verbose_name='Exercice')),
            ],
            options={
                'verbose_name': "Série d'exercice",
                'verbose_name_plural': "Séries d'exercices",
                'ordering': ['exercice', 'numero_serie'],
                'unique_together': {('exercice', 'numero_serie')},
            },
        ),
        migrations.AddIndex(
            model_name='seanceentrainement',
            index=models.Index(fields=['utilisateur', 'date_prevue'], name='workouts_se_utilisa_ea2277_idx'),
        ),
        migrations.AddIndex(
            model_name='seanceentrainement',
            index=models.Index(fields=['statut'], name='workouts_se_statut_cec228_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='progressionmachine',
            unique_together={('utilisateur', 'machine', 'mode_entrainement')},
        ),
        migrations.AlterUniqueTogether(
            name='exerciceseance',
            unique_together={('seance', 'ordre_dans_seance')},
        ),
    ]
